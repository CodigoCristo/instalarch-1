#!/bin/sh

# Instalarch 1.4
# Fork Revenge_Installer

man_partition() {

#
> .devices1.txt
lsblk -lno NAME,TYPE,SIZE | grep 'disk' | awk '{print "/dev/" $1 " " $3}' | sort -u > .devices1.txt
devices1=` awk '{print "FALSE " $0}' .devices1.txt `
#

dev=$(zenity --list --ok-label="Siguiente" --cancel-label="Atras" --radiolist --height=500 --width=650 --title="$title" --text "Seleccione el disco que desea utilizar para la instalacion." --column Seleccione --column="Discos                 " --column Tamaño $devices1 )

if [ "$?" = "1" ]
then partition
fi

if [ "$dev" = "" ]
then man_partition
fi

# Partitioning
# Allow user to partition using gparted
zenity --question --height=200 --width=450 --ok-label="Deseo particionar" --cancel-label="Ya he particionado" --title="$title" --text "Necesita particionar $dev?\nDe ser asi formatee el disco o la particion si es necesario.\nEl instalador no formateara las particiones despues de esto.\nPuede utilizar particiones separadas para /boot /home y /root, tambien puede elegir entre particion swap o archivo."
if [ "$?" = "0" ]
	then gparted $dev
fi
root_part
}

root_part() {
	greplist="Disk"
	# Select root partition
	root_part=$(zenity --list --radiolist --ok-label="Siguiente" --cancel-label="Atras" --height=500 --width=650 --title="$title" --text="Seleccione la particion para ROOT\nAdvertencia, la lista muestra todas las particiones disponibles.\nPor favor elige con cuidado." --column 'Seleccione' --column "Particiones                   " --column 'Tamaño' $(sudo fdisk -l $dev | grep dev | grep -v $greplist | awk '{print $1 " " $5}' | awk '{ printf " FALSE ""\0"$0"\0" }'))
	#mounting root partition

if [ "$?" = "1" ]
then man_partition
fi

if [ "$root_part" = "" ]
then root_part
else
greplist=$greplist"\|"$root_part
fi
(
> .root_part.txt
touch .root_part.txt    
echo $root_part >> .root_part.txt
mount $root_part /mnt
) | zenity --progress --title="$title" --text "Montando particion root..." --width=450 --pulsate --auto-close --no-cancel

swap_partition
}
swap_partition() {
	# Swap partition?
			
	zenity --question --height=100 --width=350 --ok-label="Si" --cancel-label="No" --title="$title" --text " \n Desea utilizar una particion swap?                             "
		if [ "$?" = "0" ]
		then swap_part=$(zenity --list  --radiolist --ok-label="Siguiente" --cancel-label="Atras" --height=500 --width=650 --title="$title" --text="Seleccione la particion SWAP\nAdvertencia, la lista muestra todas las particiones disponibles.\nPor favor elige con cuidado." --column 'Seleccione' --column "Particiones                   " --column 'Tamaño' $(sudo fdisk -l $dev | grep dev | grep -v $greplist | awk '{print $1 " " $5}' | awk '{ printf " FALSE ""\0"$0"\0" }'))

		if [ "$?" = "1" ]
		then swap_partition
		fi
		if [ "$swap_part" = "" ]
		then swap_partition
		else
		greplist=$greplist"\|"$swap_part
		fi
		
		else
		zenity --question --height=100 --width=350 --ok-label="Si" --cancel-label="No" --title="$title" --text " \nDesea crear un archivo swap?                                   "
		if [ "$?" = "0" ]
	 	then swapfile="yes"
	 	
		fi
		fi

boot_partition
}

boot_partition() {
	# Boot Partition?

 if [ "$SYSTEM" = "UEFI" ]
 then

		zenity --question --height=100 --width=550 --ok-label="Si" --cancel-label="No" --title="$title" --text "Desea instalar boot junto root? (recomendado). \nSi la espuesta es [SI] la particion EFI sera destinada exclusivamente para el gestor de arranque, de lo contrario se compartira con boot"
		bootloc="$?"
		
			boot_part=$(zenity --list  --radiolist --ok-label="Siguiente" --cancel-label="Atras" --height=500 --width=650 --title="$title" --text="Seleccione la particion EFI\nAdvertencia, la lista muestra todas las particiones disponibles.\nPor favor elige con cuidado." --column 'Seleccione' --column "Particiones                   " --column 'Tamaño' $(sudo fdisk -l $dev | grep dev | grep -v $greplist | awk '{print $1 " " $5}' | awk '{ printf " FALSE ""\0"$0"\0" }'))

		if [ "$?" = "1" ]
		then boot_partition
		fi

		if [ "$boot_part" = "" ]
		then boot_partition
		else
		greplist=$greplist"\|"$boot_part
		fi	
	
fi
home_partition

}

home_partition() {
	# Home Partition?
		zenity --question --height=100 --width=350 --ok-label="Si" --cancel-label="No" --title="$title" --text "Desea utilizar una particion separada para /home?"
		if [ "$?" = "0" ]
		then home_part=$(zenity --list  --radiolist --ok-label="Siguiente" --cancel-label="Atras" --height=500 --width=650 --title="$title" --text="Seleccione la particion para HOME\nAdvertencia, la lista muestra todas las particiones disponibles.\nPor favor elige con cuidado." --column 'Seleccione' --column "Particiones                   " --column 'Tamaño' $(sudo fdisk -l $dev | grep dev | grep -v $greplist | awk '{print $1 " " $5}' | awk '{ printf " FALSE ""\0"$0"\0" }'))
		# mounting home partition
		if [ "$?" = "1" ]
		then home_partition
		fi

		if [ "$home_part" = "" ]
		then home_partition
			
		fi		

		fi

		configure
}

auto_partition() {

	#
	> .devices1.txt
	lsblk -lno NAME,TYPE,SIZE | grep 'disk' | awk '{print "/dev/" $1 " " $3}' | sort -u > .devices1.txt
	devices1=` awk '{print "FALSE " $0}' .devices1.txt `
	#
	dev=$(zenity --list --ok-label="Siguiente" --cancel-label="Atras" --radiolist --height=500 --width=650 --title="$title" --text "Seleccione el disco que desea utilizar para la instalacion." --column Seleccione --column="Disco                 " --column Tamaño $devices1 )
	if [ "$?" = "1" ]
	then partition
	fi

	if [ "$dev" = "" ]
	then auto_partition
	fi

	zenity --question --height=120 --ok-label="Siguiente" --cancel-label="Atras" --width=650 --title="$title" --text " \nAdvertencia! Esto borrará todos los datos en $dev\. $dev1 Esta seguro que desea continuar?"
        yn="$?"
	> .root_part.txt
        touch .root_part.txt
        if [ "$SYSTEM" = "BIOS" ]
	then echo ${dev}"1" >> .root_part.txt
	else echo ${dev}"2" >> .root_part.txt
        fi 
	if [ "$yn" = "1" ]
	then partition
	fi

	# Find total amount of RAM
	ram=$(grep MemTotal /proc/meminfo | awk '{print $2/1024}' | sed 's/\..*//')
	# Find where swap partition stops
	num=4000

	if [ "$ram" -gt "$num" ]
		then swap_space=4096
		else swap_space=$ram
	fi
	
	uefi_swap=$(($swap_space + 513))


	#BIOS or UEFI
    if [ "$SYSTEM" = "BIOS" ]
        then
	       (
	       	echo "# Formateando disco [BIOS]..."
		echo "25"
	        dd if=/dev/zero of=$dev bs=512 count=1
		echo "# Creando particiones [BIOS]..."
		echo "40"
	        Parted "mklabel msdos"
	        Parted "mkpart primary ext4 1MiB 100%"
	        Parted "set 1 boot on"
	        mkfs.ext4 -F ${dev}1
		echo "# Montando particiones [BIOS]..."
		echo "60"
	        mount ${dev}1 /mnt
		echo "# Creando archivo swap [BIOS]..."
		echo "80"	
		) | zenity --progress --percentage=0 --title="$title" --width=450 --no-cancel --auto-close
		(	
		touch /mnt/swapfile
		dd if=/dev/zero of=/mnt/swapfile bs=1M count=${swap_space}
		chmod 600 /mnt/swapfile
		mkswap /mnt/swapfile
		swapon /mnt/swapfile
		) | zenity --progress --title="$title" --text "Creando archivo swap..." --width=450 --pulsate --auto-close --no-cancel
		(
		echo "# Creando archivo swap [UEFI]..."
		echo "99"
		swapfile="yes"
		) | zenity --progress --percentage=0 --title="$title" --width=450 --no-cancel --auto-close

	    else
        (
        echo "# Formateando disco [UEFI]..."
		echo "25"
            	dd if=/dev/zero of=$dev bs=512 count=1
		echo "# Creando particiones [UEFI]..."
		echo "40"
        Parted "mklabel gpt"
        Parted "mkpart primary fat32 1MiB 513MiB"
		Parted "mkpart primary ext4 513MiB 100%"
		Parted "set 1 boot on"
		mkfs.fat -F32 ${dev}1
		mkfs.ext4 -F ${dev}2
		echo "# Montando particiones [UEFI]..."
		echo "60"
		mount ${dev}2 /mnt
		mkdir -p /mnt/boot
		mount ${dev}1 /mnt/boot
		echo "# Creando archivo swap [UEFI]..."
		echo "80"
		) | zenity --progress --percentage=0 --title="$title" --width=450 --no-cancel --auto-close
		(
		touch /mnt/swapfile
		dd if=/dev/zero of=/mnt/swapfile bs=1M count=${swap_space}
		chmod 600 /mnt/swapfile
		mkswap /mnt/swapfile
		swapon /mnt/swapfile
		) | zenity --progress --title="$title" --text "Creando archivo swap..." --width=450 --pulsate --auto-close --no-cancel
		(
		echo "# Creando archivo swap [UEFI]..."
		echo "99"
		swapfile="yes"
		) | zenity --progress --percentage=0 --title="$title" --width=450 --no-cancel --auto-close
	fi
	configure		
}

partition() {
	ans=$(zenity --list --radiolist --height=500 --width=650 --ok-label="Siguiente" --cancel-label="Salir" --title="$title" --text "¿Desea utilizar el particionamiento automático o desea particionar el disco usted mismo?\nEl Particionamiento automático borrará completamente el disco que seleccione e instalará Arch." --column Seleccione --column Opcion TRUE "Particionado Automatico" FALSE "Particionado Manual")

if [ "$ans" = "" ]
	then start

fi
	if [ "$ans" = "Particionado Automatico" ]
	then auto_partition
	else
	man_partition
	fi

}


configure() {
# Getting Locale
country=$(zenity --list --radiolist --ok-label="Siguiente" --cancel-label="Atras" --title="$title" --height=500 --width=650 --column Seleccion --column Pais --text="Seleccion el codigo de su pais. Esto sera utilizado para buscar sevidores mas cerca de usted." TRUE TODOS FALSE AU FALSE AT FALSE BD FALSE BY FALSE BE FALSE BA FALSE BR FALSE BG FALSE CA FALSE CL FALSE CN FALSE CO FALSE HR FALSE CZ FALSE DE FALSE DK FALSE EE FALSE ES FALSE FR FALSE GB FALSE HU FALSE IE FALSE IL FALSE IN FALSE IT FALSE JP FALSE KR FALSE KZ FALSE LK FALSE LU FALSE LV FALSE MK FALSE NL FALSE NO FALSE NZ FALSE PT FALSE RO FALSE RS FALSE RU FALSE SU FALSE SG FALSE SK FALSE TR FALSE TW FALSE UA FALSE US FALSE UZ FALSE VN FALSE ZA)

if [ "$?" = "1" ]
then partition
fi
locales
}

locales() {
locales=$(cat /etc/locale.gen | grep -v "#  " | sed 's/#//g' | sed 's/ UTF-8//g' | grep .UTF-8 | sort | awk '{ printf "FALSE ""\0"$0"\0" }')

locale=$(zenity --list --radiolist --ok-label="Siguiente" --cancel-label="Atras" --height=500 --width=650 --title="$title" --text "Seleccione su idioma.\nPor defecto es Ingles Americano 'en_US.UTF-8'." --column Seleccion --column Idioma TRUE en_US.UTF-8 $locales)

if [ "$?" = "1" ]
then configure
fi
timezone
}


keymap() {
keymap=$(zenity --list --radiolist --height=500 --ok-label="Siguiente" --cancel-label="Atras" --width=650 --ok-label="Siguiente" --cancel-label="Atras" --title="$title" --text="Seleccione su keymap (mapa del teclado)" --column Seleccion --column Keymap $(localectl list-keymaps | awk '{ printf " FALSE ""\0"$0"\0" }'))
if [ "$?" = "1" ]
then locales
fi
if [ "$keymap" = "" ]
then keymap
fi
timezone
}
timezone() {
zones=$(cat /usr/share/zoneinfo/zone.tab | awk '{print $3}' | grep "/" | sed "s/\/.*//g" | sort -ud | sort | awk '{ printf " FALSE ""\0"$0"\0" }')

zone=$(zenity --list --radiolist --ok-label="Siguiente" --cancel-label="Atras" --height=500 --width=650 --title="$title" --text "Seleccione la zona de su pais." --column Seleccion --column Zona $zones)
if [ "$?" = "1" ]
then locales
fi
if [ "$zone" = "" ]
then timezone
fi
subzones
}
subzones() {
subzones=$(cat /usr/share/zoneinfo/zone.tab | awk '{print $3}' | grep "$zone/" | sed "s/$zone\///g" | sort -ud | sort | awk '{ printf " FALSE ""\0"$0"\0" }')

subzone=$(zenity --list --radiolist --ok-label="Siguiente" --cancel-label="Atras" --height=500 --width=650 --title="$title" --text "Seleccione su sub-zona." --column Seleccion --column Sub-Zona $subzones)
if [ "$?" = "1" ]
then timezone
fi
if [ "$subzone" = "" ]
then subzones
fi
clock
}

clock() {
# Getting Clock Preference
clock=$(zenity --list --radiolist --ok-label="Siguiente" --cancel-label="Atras" --height=500 --width=650 --title="$title" --text "Desea utilizar UTC o Local Time\nUTC es recomenado si no tienes dual boot con Windows." --column Seleccion --column Tiempo TRUE utc FALSE localtime)
if [ "$?" = "1" ]
then subzones
fi
hostnamez
}
# Getting hostname, username, root password, and user password
hostnamez() {
hname=$(zenity --entry --title="$title" --width=450 --ok-label="Siguiente" --cancel-label="Atras" --text "Por favor introduzca el hostname para su equipo.\nTodas las letras deben ser minusculas." --entry-text "instalarch")
if [ "$?" = "1" ]
then clock
fi
if [ "$hname" = "" ]
then hostnamez
fi
usernamez
}
usernamez(){
username=$(zenity --entry --title="$title" --width=450 --ok-label="Siguiente" --cancel-label="Atras" --text "Por favor introduzca el nombre de usuario para el nuevo usuario.\nTodo en letras minusculas." --entry-text "username")
if [ "$?" = "1" ]
then hostnamez
fi
if [ "$username" = "" ]
then usernamez
fi
root_password
}

root_password() {
rtpasswd=$(zenity --entry --title="$title" --width=450 --ok-label="Siguiente" --cancel-label="Atras" --text "Introduzca la contraseña para root." --hide-text)
if [ "$?" = "1" ]
then usernamez
fi
if [ "$rtpasswd" = "" ]
then 
zenity --error --height=100 --width=350 --title="$title" --text "No puede dejar este campo vacio."
	root_password
fi

rtpasswd2=$(zenity --entry --title="$title" --width=450 --ok-label="Siguiente" --cancel-label="Atras" --text "Vuelva a introducirla." --hide-text)
if [ "$?" = "1" ]
then root_password
fi
	if [ "$rtpasswd" != "$rtpasswd2" ]
		then zenity --error --height=100 --width=350 --title="$title" --text "Las contraseñas no coinciden, vuelva a intentarlo."
		root_password
	fi


user_password
}


user_password() {
userpasswd=$(zenity --entry --title="$title" --width=450 --ok-label="Siguiente" --cancel-label="Atras" --text "Introduzca la contraseña para $username." --hide-text)
if [ "$?" = "1" ]
then root_password
fi
if [ "$userpasswd" = "" ]
then 
zenity --error --height=100 --width=350 --title="$title" --text "No puede dejar este campo vacio."
	user_password
fi

userpasswd2=$(zenity --entry --title="$title" --width=450 --ok-label="Siguiente" --cancel-label="Atras" --text "Vuelva a introducir la contraseña para $username." --hide-text)
if [ "$?" = "1" ]
then user_password
fi

	if [ "$userpasswd" != "$userpasswd2" ]
		then zenity --error --height=100 --width=450 --title="$title" --text "Las contraseñas no coinciden, vuelva a intentarlo."
		user_password
	fi

kernel
}

##

kernel() {
kernel=$(zenity --list  --ok-label="Siguiente" --cancel-label="Atras" --radiolist --height=500 --width=650 --title="$title" --text "Hay varios nucleos(kernel) disponibles:\n \n*El mas comun el el kernel linux.\nEste kernel es el más actualizado y proporciona el mejor soporte de hardware. Sin embargo, \npodría haber posibles errores en este núcleo, a pesar de las pruebas.\n \n*El kernel linux-lts esta enfocado mas en la estabilidad.\nSe basa en un núcleo antiguo, por lo que puede carecer de algunas características más nuevas.\n \n*El kernel linux-hardened esta enfocado en la seguridad\nContiene el parche de Grsecurity Patchset y PaX para una maxima seguridad.\n \n*El kernel linux-zen es el resultado de la colaboracion de hackers\npara proveer el mejor kernel posible para uso diario.\n \nSeleccione el kernel que desea instalar." --column "Seleccion" --column "Kernel" TRUE linux FALSE linux-lts FALSE linux-hardened FALSE linux-zen)

if [ "$?" = "1" ]
then user_password
fi
videocont
}
##

videocont() {
videocontroller=$(zenity --list --title="$title" --radiolist --ok-label="Siguiente" --cancel-label="Atras" --height=500 --width=650 --text "Seleccione su tarjeta grafica:" --column "Seleccion" --column "Controlador" --column "Descripcion" TRUE "xf86-video-vesa" "Controlador generico" FALSE "xf86-video-ati" "Controlador AMD ATI / Radeon - opensource" FALSE "xf86-video-amdgpu" "Controlador AMD Radeon (ultimos modelos) - opensource" FALSE "xf86-video-intel" "Graficas Intel - opensource" FALSE "xf86-video-nouveau" "Graficas nvidia - opensource" FALSE "nvidia" "Graficas envidia - propietario" FALSE "nvidia-390xx" "Graficas nvidia-390xx - propietario")
if [ "$?" = "1" ]
then kernel
fi
desktop
}

desktop() {
# Choosing Desktop
desktops=$(zenity --list --height=500 --width=650 --ok-label="Siguiente" --cancel-label="Atras" --title="$title" --radiolist --text "Cual entorno de escritorio desea instalar?" --column Seleccion --column Escritorio --column Descripcion TRUE "awesome" "Awesome WM + Pack Customizado")
if [ "$?" = "1" ]
then videocont
fi
displaymanager
}

displaymanager() {
dm=$(zenity --list --title="$title" --radiolist --ok-label="Siguiente" --cancel-label="Atras" --height=500 --width=650 --text "Cual gestor de pantalla desea instalar?" --column "Select" --column "Display Manager" TRUE "sddm" FALSE "lxdm" FALSE "lightdm" FALSE "gdm")
if [ "$?" = "1" ]
then desktop
fi
multilib
}

instalarchrepo() {
zenity --question --title="$title" --ok-label="Si" --cancel-label="No" --height=100 --width=350 --text="Desea agregar el repositorio oficial de Instalarch?     "
rr="$?"
multilib
}

multilib() {
zenity --question --height=100 --width=550 --ok-label="Si" --cancel-label="No" --title="$title" --text="Desea habilitar los repositorios multilib? Puedes necesitar esto para Steam, Wine, o cualquier otro software 32-bit."
multilib="$?"
packagemanager
}

packagemanager() {
zenity --question --title="$title" --ok-label="Si" --cancel-label="No" --height=100 --width=550 --text="¿Desea instalar un administrador de paquetes gráfico? Esto le permitirá instalar y eliminar aplicaciones sin tener que lidiar con la línea de comando." 
pm="$?"
if [ "$pm" = "0" ] 
then  
pack=$(zenity --list --radiolist --title="$title" --ok-label="Siguiente" --cancel-label="Atras" --height=500 --width=650 --text="Que administrador de paquetes desea instalar?" --column Seleccion --column "Adm de paquetes" --column "Descripcion" FALSE "octopi" "Plasma o libreria qt" FALSE "pamac-aur" "Gnome o libreria gtk") 
if [ "$?" = "1" ]
then multilib
fi
if [ "$pack" = "" ]
then packagemanager
fi
fi

archuserrepo
}

archuserrepo() {
zenity --question --height=100 --width=550 --ok-label="Si" --cancel-label="No" --title="$title" --text "Desea instalar yay (AUR Herlper)? Podras instalar paquetes del repositorio de usuarios."
abs="$?"
bootloader
}


# allowing user to select extra applications
##rank=$(curl -s "https://www.archlinux.org/mirrorlist/?country="$country"&protocol=https&use_mirror_status=on" | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 10 -)
##echo -e "$rank" > /etc/pacman.d/mirrorlist
##pacman -Syy


# bootloader?
bootloader() {

grub=$(zenity --question --height=100 --width=550 --ok-label="Si" --cancel-label="No" --title="$title" --text "Desea instalar un cargador de arranque?\nLa respuesta usualmente es si, a menos que tenga otro arrancador que desee conservar")
grb="$?"
if [ "$grb" = "0" ]
	then 
		> .devices1.txt
lsblk -lno NAME,TYPE,SIZE | grep 'disk' | awk '{print "/dev/" $1 " " $3}' | sort -u > .devices1.txt
devices1=` awk '{print "FALSE " $0}' .devices1.txt `
#
		grub_device=$(zenity --list --radiolist --height=500 --ok-label="Siguiente" --cancel-label="Atras" --width=650 --title="$title" --text "Seleccione el disco para instalar el cargador de arranque." --column Seleccion --column "Disco        " --column Tamaño $devices1)
probe="$?"
if [ "$?" = "1" ]
then bootloader
fi
if [ "$grub_device" = "" ]
then bootloader
fi

fi
installing
}

# Installation
installing() {
zenity --question --height=150 --width=550 --ok-label="Continuar" --cancel-label="Abortar" --title="$title" --text "El proceso de instalacion esta por iniciar, todos los paquetes seran descargados desde internet, asi que asegurese de contar con una conexion constante a internet.\nEste proceso puede demorar."

if [ "$?" = "1" ]
	then exit
else 


(

#start partitions
if [ "$ans" = "Particionado Manual" ]
then
	#montando home
if [ "$root_part" != "" ]
then
echo "# Montando particion root..."
touch .root_part.txt    
echo $root_part >> .root_part.txt
mount $root_part /mnt
fi

	#montando particion swap
if [ "$swap_part" != "" ]
then
	echo "# Montando particion swap..."
swap_number=$(echo $swap_part | sed "s#$dev##g")
Parted "set $swap_number swap on"
mkswap $swap_part
swapon $swap_part
fi

	#creando archivoswap
if [ "$swapfile" = "yes" ]
then
	echo "# Creando archivo swap (esto puede demorarse)..."
ram=$(grep MemTotal /proc/meminfo | awk '{print $2/1024}' | sed 's/\..*//')
# Find where swap partition stops
num=4000
if [ "$ram" -gt "$num" ]
then swap_space=4096
else swap_space=$ram
fi

uefi_swap=$(($swap_space + 513))
	
touch /mnt/swapfile
dd if=/dev/zero of=/mnt/swapfile bs=1M count=${swap_space}
chmod 600 /mnt/swapfile
mkswap /mnt/swapfile
swapon /mnt/swapfile
fi

# Montando boot
if [ "$boot_part" != "" ]
then
echo "# Montando particion EFI..."
boot_number=$(echo $boot_part | sed "s#$dev##g")
Parted "set $boot_number boot on"
#mkfs.fat -F32 $boot_part
if [ "$bootloc" = "1" ]
then
mkdir -p /mnt/boot
mount $boot_part /mnt/boot
esp="/boot"
else
mkdir -p /mnt/efi
mount $boot_part /mnt/efi
esp="/efi"
fi

fi

	#Montando home
if [ "$home_part" != "" ]
then
	echo "# Montando particion home..."
greplist=$greplist"\|"$home_part
mkdir -p /mnt/home
mount $home_part /mnt/home
fi		

fi
#End partitions

echo "# Buscando los servidores mas rapidos..."
rank=$(curl -s "https://www.archlinux.org/mirrorlist/?country="$country"&protocol=https&use_mirror_status=on" | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 10 -)
echo -e "$rank" > /etc/pacman.d/mirrorlist
echo -e "$rank" > .mirrors.txt
# updating pacman cache
echo "5"
echo "# Actualizando base de datos y claves..."
pacman -Syy
pacman-key --populate archlinux
echo "10"
#installing base
echo "# Instalando Base (esto puede demorar)..."
basedownloaded=""
while [ "$basedownloaded" == "" ] ; do
pacstrap /mnt base base-devel nano dhcpcd netctl iwd net-tools

if [ -f "/mnt/bin/bash" ] ; then
 basedownloaded="yes"
else
	res=$(zenity --error --height=100 --width=550 --extra-button="Reintentar" --ok-label="Reiniciar" --title="$title" --text "Ha ocurrido un error al descargar los paquetes, verifique su conexion a internet y pulse [Reintentar]. Si el problema persiste reinicie la instalacion")

	if [ "$res" != "Reintentar" ]
	then
	reboot
	fi

fi
done

echo "# Instalando kernel (esto puede demorar)..."
echo "15"
kerneldownloaded=""
while [ "$kerneldownloaded" == "" ] ; do

if [ "$kernel" = "linux" ]
	then pacstrap /mnt linux-firmware mkinitcpio linux-headers linux
elif [ "$kernel" = "linux-lts" ]
	then pacstrap /mnt linux-firmware mkinitcpio linux-headers linux-lts
elif [ "$kernel" = "linux-hardened" ]
	then pacstrap /mnt linux-firmware mkinitcpio linux-headers linux-hardened
elif [ "$kernel" = "linux-zen" ]
	then pacstrap /mnt linux-firmware mkinitcpio linux-headers linux-zen
fi

arch_chroot "pacman -Qqe > pkglist.txt"
if grep -q linux-firmware "/mnt/pkglist.txt"; then
kerneldownloaded="yes"
else

	res=$(zenity --error --height=100 --width=550 --extra-button="Reintentar" --ok-label="Reiniciar" --title="$title" --text "Ha ocurrido un error al descargar los paquetes, verifique su conexion a internet y pulse [Reintentar]. Si el problema persiste reinicie la instalacion")

	if [ "$res" != "Reintentar" ]
	then
	reboot
	fi

fi

done

echo "20"

echo "# Generando tabla de particiones..."
genfstab -p /mnt >> /mnt/etc/fstab
if grep -q "/mnt/swapfile" "/mnt/etc/fstab"; then
sed -i '/swapfile/d' /mnt/etc/fstab
echo "/swapfile		none	swap	defaults	0	0" >> /mnt/etc/fstab
fi

echo "25"
echo "# Instalando complementos..."

complementsdownloaded=""
while [ "$complementsdownloaded" == "" ] ; do

pacstrap /mnt networkmanager ifplugd xf86-input-synaptics git wget xdg-user-dirs acpi pulseaudio pulseaudio-alsa alsa-utils fzf ntfs-3g polkit-gnome shotwell noto-fonts-emoji gedit htop lsb-release nano nautilus gparted neofetch network-manager-applet rofi scrot ttf-dejavu udiskie unzip xfce4-power-manager termite hddtemp reflector light


arch_chroot "pacman -Qqe > pkglist.txt"
if grep -q git "/mnt/pkglist.txt"; then
complementsdownloaded="yes"
else

	res=$(zenity --error --height=100 --width=550 --extra-button="Reintentar" --ok-label="Reiniciar" --title="$title" --text "Ha ocurrido un error al descargar los paquetes, verifique su conexion a internet y pulse [Reintentar]. Si el problema persiste reinicie la instalacion")

	if [ "$res" != "Reintentar" ]
	then
	reboot
	fi

fi

done

echo "30"
echo "# Instalando servidor grafico..."

xorgdownloaded=""
while [ "$xorgdownloaded" == "" ] ; do
pacstrap /mnt xorg xorg-apps xorg-xinit xorg-twm xorg-xclock $videocontroller

arch_chroot "pacman -Qqe > pkglist.txt"
if grep -q xorg-xinit "/mnt/pkglist.txt"; then
xorgdownloaded="yes"
else

	res=$(zenity --error --height=100 --width=550 --extra-button="Reintentar" --ok-label="Reiniciar" --title="$title" --text "Ha ocurrido un error al descargar los paquetes, verifique su conexion a internet y pulse [Reintentar]. Si el problema persiste reinicie la instalacion")

	if [ "$res" != "Reintentar" ]
	then
	reboot
	fi

fi

done

echo "35"

# virtualbox
echo "# Instalando escritorio..."
# installing chosen desktop
desktopdownloaded=""
while [ "$desktopdownloaded" == "" ] ; do
pacstrap /mnt $desktops

arch_chroot "pacman -Qqe > pkglist.txt"
if grep -q awesome "/mnt/pkglist.txt"; then
desktopdownloaded="yes"
else

	res=$(zenity --error --height=100 --width=550 --extra-button="Reintentar" --ok-label="Reiniciar" --title="$title" --text "Ha ocurrido un error al descargar los paquetes, verifique su conexion a internet y pulse [Reintentar]. Si el problema persiste reinicie la instalacion")

	if [ "$res" != "Reintentar" ]
	then
	reboot
	fi

fi

done


echo "40"
##

##

echo "# Habilitando servicios..."
# enabling network manager
arch_chroot "systemctl enable dhcpcd"
arch_chroot "systemctl enable NetworkManager"
arch_chroot "systemctl enable hddtemp.service"

echo "42"
echo "# Actualizando pacman.conf..."
# adding revenge_repo
echo -e "\n[instalarch_repo]" >> /mnt/etc/pacman.conf;echo -e "SigLevel = Optional TrustAll" >> /mnt/etc/pacman.conf;echo -e "Server = https://wilssonmartee.github.io/instalarch_repo/x86_64\n" >> /mnt/etc/pacman.conf
echo "# Sincronizando base de datos..."
arch_chroot "pacman -Syy"

echo "45"
# installing pamac-aur
if [ "$pm" = "0" ]
then
echo "# Instalando gestor de paquetes grafico..."

gpgdownloaded=""
while [ "$gpgdownloaded" == "" ] ; do
arch_chroot "pacman -S --noconfirm $pack"

arch_chroot "pacman -Qqe > pkglist.txt"
if grep -q $pack "/mnt/pkglist.txt"; then
gpgdownloaded="yes"
else

	res=$(zenity --error --height=100 --width=550 --extra-button="Reintentar" --ok-label="Reiniciar" --title="$title" --text "Ha ocurrido un error al descargar los paquetes, verifique su conexion a internet y pulse [Reintentar]. Si el problema persiste reinicie la instalacion")

	if [ "$res" != "Reintentar" ]
	then
	reboot
	fi

fi

done

fi
echo "50"
#multilib
if [ "$multilib" = "0" ]
then
echo "# Habilitando multilib..."
echo -e "\n[multilib]" >> /mnt/etc/pacman.conf;echo -e "Include = /etc/pacman.d/mirrorlist\n" >> /mnt/etc/pacman.conf
echo "# Sincronizando base de datos..."
arch_chroot "pacman -Syy"
fi
echo "55"
# AUR
if [ "$abs" = "0" ]
	then 

echo "# Instalando AUR Herlper..."

yaydownloaded=""
while [ "$yaydownloaded" == "" ] ; do
arch_chroot "pacman -S --noconfirm yay"

arch_chroot "pacman -Qqe > pkglist.txt"
if grep -q yay "/mnt/pkglist.txt"; then
yaydownloaded="yes"
else

	res=$(zenity --error --height=100 --width=550 --extra-button="Reintentar" --ok-label="Reiniciar" --title="$title" --text "Ha ocurrido un error al descargar los paquetes, verifique su conexion a internet y pulse [Reintentar]. Si el problema persiste reinicie la instalacion")

	if [ "$res" != "Reintentar" ]
	then
	reboot
	fi

fi

done


fi
echo "60"
echo "# Instalando ucode..."
# installing ucode
ucodedownloaded=""
while [ "$ucodedownloaded" == "" ] ; do
proc=$(grep -m1 vendor_id /proc/cpuinfo | awk '{print $3}')
if [ "$proc" = "GenuineIntel" ]
then pacstrap /mnt intel-ucode gotop-git
elif [ "$proc" = "AuthenticAMD" ]
then
pacstrap /mnt amd-ucode gotop-git
fi

arch_chroot "pacman -Qqe > pkglist.txt"
if grep -q gotop-git "/mnt/pkglist.txt"; then
ucodedownloaded="yes"
else

	res=$(zenity --error --height=100 --width=550 --extra-button="Reintentar" --ok-label="Reiniciar" --title="$title" --text "Ha ocurrido un error al descargar los paquetes, verifique su conexion a internet y pulse [Reintentar]. Si el problema persiste reinicie la instalacion")

	if [ "$res" != "Reintentar" ]
	then
	reboot
	fi

fi

done

echo "65"
if [ "$grb" = "0" ]
	then 
		echo "# Instalando os-prober..."
		
		osdownloaded=""
		while [ "$osdownloaded" == "" ] ; do
		pacstrap /mnt os-prober

		arch_chroot "pacman -Qqe > pkglist.txt"
		if grep -q os-prober "/mnt/pkglist.txt"; then
		osdownloaded="yes"
		else

		res=$(zenity --error --height=100 --width=550 --extra-button="Reintentar" --ok-label="Reiniciar" --title="$title" --text "Ha ocurrido un error al descargar los paquetes, verifique su conexion a internet y pulse [Reintentar]. Si el problema persiste reinicie la instalacion")

		if [ "$res" != "Reintentar" ]
		then
		reboot
		fi

		fi

		done



		echo "68"
		if [ "$SYSTEM" = 'BIOS' ]
		then echo "# Instalando Bootloader (BIOS)..."
		

		grubdownloaded=""
		while [ "$grubdownloaded" == "" ] ; do
		pacstrap /mnt grub

		arch_chroot "pacman -Qqe > pkglist.txt"
		if grep -q grub "/mnt/pkglist.txt"; then
		grubdownloaded="yes"
		else

		res=$(zenity --error --height=100 --width=550 --extra-button="Reintentar" --ok-label="Reiniciar" --title="$title" --text "Ha ocurrido un error al descargar los paquetes, verifique su conexion a internet y pulse [Reintentar]. Si el problema persiste reinicie la instalacion")

		if [ "$res" != "Reintentar" ]
		then
		reboot
		fi

		fi

		done


		arch_chroot "grub-install --target=i386-pc $grub_device"
		arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
		else
		echo "# Instalando Bootloader (UEFI)..."

		if [ "$ans" = "Particionado Automatico" ]
			then root_part=${dev}2
		fi
		#instalando grub

		grubdownloaded=""
		while [ "$grubdownloaded" == "" ] ; do
		pacstrap /mnt grub efibootmgr

		arch_chroot "pacman -Qqe > pkglist.txt"
		if grep -q grub "/mnt/pkglist.txt"; then
		grubdownloaded="yes"
		else

		res=$(zenity --error --height=100 --width=550 --extra-button="Reintentar" --ok-label="Reiniciar" --title="$title" --text "Ha ocurrido un error al descargar los paquetes, verifique su conexion a internet y pulse [Reintentar]. Si el problema persiste reinicie la instalacion")

		if [ "$res" != "Reintentar" ]
		then
		reboot
		fi

		fi

		done

		arch_chroot "grub-install --target=x86_64-efi --efi-directory=$esp --bootloader-id=Instalarch"
		arch_chroot "grub-install --target=x86_64-efi --efi-directory=$esp --removable"
		arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
				

		fi
fi
echo "70"
# running mkinit
echo "# Ejecutando mkinitcpio..."
arch_chroot "mkinitcpio -p $kernel"
echo "75"

#root password
echo "# Configurando usuario root..."
touch .passwd
echo -e "$rtpasswd\n$rtpasswd2" > .passwd
arch_chroot "passwd root" < .passwd >/dev/null
rm .passwd

#adding user
echo "# Configurando nuevo usuario $username..."

arch_chroot "useradd -m -g users -G adm,lp,wheel,power,audio,video,input,games,mail,scanner,storage,disk -s /bin/bash $username"
touch .passwd
echo -e "$userpasswd\n$userpasswd2" > .passwd
arch_chroot "passwd $username" < .passwd >/dev/null
rm .passwd
echo "80"
#setting locale

echo "# Configurando idioma..."
echo "LANG=\"${locale}\"" > /mnt/etc/locale.conf
echo "${locale} UTF-8" > /mnt/etc/locale.gen
arch_chroot "locale-gen"
export LANG=${locale}
echo "# Configurando mapa del teclado..."
#setting keymap
keymap="en"
echo KEYMAP=$keymap >> /mnt/etc/vconsole.conf

echo "83"


#setting timezone
echo "# Configurando zona horaria..."
arch_chroot "rm /etc/localtime"
arch_chroot "ln -s /usr/share/zoneinfo/${zone}/${subzone} /etc/localtime"

#setting hw clock
echo "# Configurando hora del sistema..."
arch_chroot "hwclock --systohc --$clock"

#setting hostname
echo "# Configurando usuario..."
arch_chroot "echo $hname > /etc/hostname"

# setting n permissions
echo "%wheel ALL=(ALL) ALL" >> /mnt/etc/sudoers

echo "# Instalando shell..."
# selecting shell
shell="zsh"
shelldownloaded=""
while [ "$shelldownloaded" == "" ] ; do

if [ "$shell" = "zsh" ]
then arch_chroot "pacman -S --noconfirm zsh zsh-syntax-highlighting zsh-completions zsh-theme-powerlevel10k zsh-autosuggestions;chsh -s /usr/bin/zsh $username"
elif [ "$shell" = "bash" ]
then arch_chroot "pacman -S --noconfirm bash;chsh -s /bin/bash $username"
elif [ "$shell" = "fish" ]
then arch_chroot "pacman -S --noconfirm fish;chsh -s /usr/bin/fish $username"
fi

arch_chroot "pacman -Qqe > pkglist.txt"
if grep -q zsh "/mnt/pkglist.txt"; then
shelldownloaded="yes"
else
res=$(zenity --error --height=100 --width=550 --extra-button="Reintentar" --ok-label="Reiniciar" --title="$title" --text "Ha ocurrido un error al descargar los paquetes, verifique su conexion a internet y pulse [Reintentar]. Si el problema persiste reinicie la instalacion")

if [ "$res" != "Reintentar" ]
then
reboot
fi
fi

done

echo "85"

# starting desktop manager

echo "# Configurando gestor de pantalla..."

		dmdownloaded=""
		while [ "$dmdownloaded" == "" ] ; do
	
if [ "$dm" = "lightdm" ]
then pacstrap /mnt lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings;arch_chroot "systemctl enable lightdm.service"
else pacstrap /mnt $dm;arch_chroot "systemctl enable $dm.service"
fi
		arch_chroot "pacman -Qqe > pkglist.txt"
		if grep -q $dm "/mnt/pkglist.txt"; then
		dmdownloaded="yes"
		else

		res=$(zenity --error --height=100 --width=550 --extra-button="Reintentar" --ok-label="Reiniciar" --title="$title" --text "Ha ocurrido un error al descargar los paquetes, verifique su conexion a internet y pulse [Reintentar]. Si el problema persiste reinicie la instalacion")

		if [ "$res" != "Reintentar" ]
		then
		reboot
		fi

		fi

		done


# copying files and configs
echo "# Descargando configuraciones..."
echo "90"
configdownloaded=""
while [ "$configdownloaded" == "" ] ; do

git clone https://github.com/wilssonmartee/config.git /mnt/config

arch_chroot "pacman -Qqe > pkglist.txt"
		if [ -d "/mnt/config" ]; then
		configdownloaded="yes"
		else

		res=$(zenity --error --height=100 --width=550 --extra-button="Reintentar" --ok-label="Reiniciar" --title="$title" --text "Ha ocurrido un error al descargar los paquetes, verifique su conexion a internet y pulse [Reintentar]. Si el problema persiste reinicie la instalacion")

		if [ "$res" != "Reintentar" ]
		then
		reboot
		fi

		fi

		done

echo "95"

echo "# Guardando configuraciones..."
cp -rf /mnt/config/awesome/themes/* /mnt/usr/share/themes/
rm -rf /mnt/usr/share/icons/Adwaita
rm -rf /mnt/usr/share/icons/default
cp -rf /mnt/config/awesome/icons/* /mnt/usr/share/icons/
cp -rf /mnt/config/awesome/fonts/* /mnt/usr/share/fonts
cp -rf /mnt/config/awesome/awesome-rofi.rasi /mnt/usr/share/rofi/themes
cp -rf /mnt/config/awesome/powerlevel-icons.zsh /mnt/usr/share/zsh-theme-powerlevel10k/internal/icons.zsh

rm -rf /mnt/home/$username/.config
cp -rf /mnt/config/awesome/.config /mnt/home/$username
## mv /mnt/config/awesome/.oh-my-zsh-files /mnt/config/awesome/.oh-my-zsh
## cp -rf /mnt/config/awesome/.oh-my-zsh /mnt/home/$username
cp -rf /mnt/config/awesome/.zshrc /mnt/home/$username
cp -rf /mnt/config/awesome/.p10k.zsh /mnt/home/$username
cp -rf /mnt/config/awesome/completion.zsh /mnt/usr/share/fzf
# Ojo
##cp -f /mnt/config/awesome/pacman.conf /mnt/etc/pacman.conf
echo "97"
arch_chroot "chmod -R 755 /home/$username/.config"
#arch_chroot "chmod -R 755 /home/$username/.oh-my-zsh"
arch_chroot "chmod 755 /home/$username/.zshrc"
arch_chroot "chmod 755 /home/$username/.p10k.zsh"
arch_chroot "chown -R $username:users /home/$username/.config"
# arch_chroot "chown -R $username:users /home/$username/.oh-my-zsh"
arch_chroot "chown $username:users /home/$username/.zshrc"
arch_chroot "chown $username:users /home/$username/.p10k.zsh"

cp -rf /mnt/config/awesome/gtkrc /mnt/usr/share/gtk-2.0
cp -rf /mnt/config/awesome/settings.ini /mnt/usr/share/gtk-3.0
echo "# Eliminando archivos temporales..."
echo "99"
rm -rf /mnt/config


# unmounting partitions
echo "# Desmontando particiones..."
umount -R /mnt
echo "100"
echo "# Instalacion finalizada!"
) | zenity --progress --percentage=0 --title="$title" --ok-label="Reiniciar" --width=450 --no-cancel
reboot
fi
}

# execution
# System Detection
if [[ -d "/sys/firmware/efi/" ]]; then
      SYSTEM="UEFI"
      else
      SYSTEM="BIOS"
fi

arch_chroot() {
    arch-chroot /mnt /bin/bash -c "${1}"
}

Parted() {
	parted --script $dev "$1"
}


######### iso ##########

test(){
(
echo "# Verificando conexion a internet..."
redfile="/tmp/.networks"
> $redfile
wget -q --tries=10 --timeout=20 --spider http://google.com
if [[ $? -eq 0 ]]; then
		sleep 2
        echo "# Estas conectado!"
        echo "1" >> $redfile
     
else
		sleep 2
        echo "# Fallo conexion"
        echo "0" >> $redfile
                
fi
) | zenity --progress --title="$title" --width=450 --no-cancel --pulsate --auto-close

int=$(cat "/tmp/.networks")
if [ "$int" = "1" ]
then
		
        getpackets
     
else
		nointernet
                
fi

}

getpackets() {

wget https://raw.githubusercontent.com/wilssonmartee/instalarch/master/.isoinstaller
if [ -f ".isoinstaller" ] ; then
sh .isoinstaller

else
test
fi
}
nointernet() {
zenity --question --height=100 --width=450 --title="$title" --ok-label="Utilizar red wifi" --cancel-label="Atras" --text "Ups! Parece que no tienes acceso a internet, si deseas conectarte a una red wifi pulsa Utilizar red wifi, si ya estas conectado via cable o wifi asegurate de contar con una buena conexion."

if [ "$?" = "1" ]
then 
start
else
connection
fi

}

connection() {
(
echo "# Escaneando redes disponibles..."
nmcli dev wifi rescan

########################### Start nmcli ###########################	
ssidred="None"
declare -i nrr=2

while [ "$ssidred" != "" ] ; do
ssidred="$(echo 'print devices' | nmcli -f ssid dev wifi list | awk '{if (NR=='"$nrr"') {print}}')" 
securityred="$(echo 'print devices' | nmcli -f security dev wifi list | awk '{if (NR=='"$nrr"') {print}}')" 
bars="$(echo 'print devices' | nmcli -f bars dev wifi list | awk '{if (NR=='"$nrr"') {print}}')" 


if [ "$ssidred" != "" ] ; then
ssid="$(echo $ssidred | sed 's/ *$//g')"
securityred="$(echo $securityred | sed 's/ *$//g')"
networks="$(echo -e "'FALSE' \ '"$ssid"' \ '"$securityred"' \ '"$bars"' \ ")"
net=$net" "$networks
fi
nrr=$nrr+1
done


net="$(echo $net | sed 's/'\''/"/g')"
netfile="/tmp/.networks"
> $netfile

echo "zenity --list --print-column='ALL' --ok-label="Conectar" --cancel-label="Atras" --title='Conectate a una red wifi' --text='Seleccione la red que desea utilizar' --width=650 --height=500 --radiolist \\" >> $netfile
echo "--column='Seleccione' \\" >> $netfile
echo "--column='SSID            ' \\" >> $netfile
echo "--column='Seguridad    ' \\" >> $netfile
echo "--column='Señal' \\" >> $netfile
echo $net >> $netfile
) | zenity --progress --title="Escaneando" --width=450 --no-cancel --pulsate --auto-close
selected=$(source "/tmp/.networks")
if [ "$?" = "1" ]
then start
fi

if [ "$selected" = "" ]
then
	zenity --error --height=100 --width=350 --title="Error" --text "Debe seleccionar una red.                                "
	connection
fi

IFS='|' read -a conexion <<< "$selected"
ssidselect=$(echo ${conexion[0]} | sed -e 's/^ *//g' -e 's/ *$//g')
sec=$(echo ${conexion[1]} | sed "s# ##g")

pass
}


pass() {

if [ $sec == "--" ] 
then
	if [ "$int" = "0" ]
		then
(
echo "# Conectandose a $ssidselect..."
nmcli dev wifi connect "$ssidselect"
) | zenity --progress --title="Conectando" --width=450 --no-cancel --pulsate --auto-close
fi
fi

if [ $sec != "--" ] 
then
redpass=$(zenity --entry --title="Contraseña" --width=450 --ok-label="Siguiente" --cancel-label="Atras" --text "Introduzca la contraseña de ${conexion[0]}." )

if [ "$?" = "1" ]
then 
connection
fi

	if [ "$redpass" != "" ]
	then
		if [ "$int" = "0" ]
		then
		(
	echo "# Conectandose a $ssidselect..."
	nmcli dev wifi connect "$ssidselect" password "$redpass"
	) | zenity --progress --title="Conectando" --width=450 --no-cancel --pulsate --auto-close
	fi
fi
fi	
test

}
title="Instalarch [$SYSTEM]"
########################### End nmcli ###########################
start() {
zenity --question --height=120 --width=650 --title="$title" --ok-label="Iniciar instalacion" --cancel-label="Salir" --text 'El proceso de instalacion esta por iniciar, asegurese de hacer un backup de su informacion mas importante por su seguridad.'

if [ "$?" = "1" ]
	then exit
fi
partition
}

n="0"
if [ "$n" = "0" ]
	then 
start
fi
